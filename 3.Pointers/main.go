package main

import "fmt"

func main() {
	//pointers()

	x := 10
	fmt.Println("значение х:", x)

	increment(&x)
	fmt.Println("значение х после вызова функции increment():", x)
}

/*
	Используя синтаксис *p, мы обращаемся к значению, которое находится по адресу p, то есть в данном случае это значение переменной x.
	Используя оператор присваивания, мы можем изменить значение, которое хранится в переменной x, так как мы изменили значение,
	которое находится по этому адресу в памяти.
*/
func pointers()  {
	x := 10
	p := &x

	fmt.Println("значение х:", x)
	fmt.Println("адрес х:",p)
	fmt.Println("значение *p:",*p)

	*p = 15

	fmt.Println("значение х после изменения *p:", x)
}

/*
	Передавая ссылки в функции, мы можем изменять значение переменных внутри тела функции.
	Если же мы передаем не ссылку, а значение, то оно копируется в новую локальную переменную в рамках этой функции.
	Соответственно, все операции над этой переменной не отображаются на передаваемом значении.
*/
func increment(p *int) {
	*p += 1
}